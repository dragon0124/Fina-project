#include<stdio.h>
#include<stdlib.h>
#include<time.h>
#define Bet 1000

typedef struct pokers
{
	int num[5];
	int suit[5];
}poker;
typedef struct cards
{
	int num;
	int suit;
}card;

void set(card poker[], int num[], int suit[]);						//設定牌
void intercard(int num[], int suit[]);								//輸入牌
void incard(card cards[], int num[], int suit[], int bark);			//抽牌
int bet(int bets[],int bark[]);										//下注
int judge(const char *suit_name[], int num[], int suit[],int bark);	//判斷
void bubble(int n[], int s[]);										//氣泡排序
int maxs(int a,int b,int c,int d);									//比大小

int main(void)
{
	int i,j,k,a,b,c;
	int total,max,p1, pc_s[3];
	int bark[4] = { 1, 1, 1, 1 };
	int money[4] = { Bet, Bet, Bet, Bet };
	int num[13] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13 };
	int suit[4] = { 1, 2, 3, 4 };
	const char *suit_name[] = { "梅花", "方塊", "愛心", "黑桃" ,"    "};
	const char *numble[] = { " 1", " 2", " 3", " 4", " 5", " 6", " 7", " 8", " 9", "10", "11", "12", "13", "  ", };
	card cards[52];													//設定52組牌資料
	poker player,pc[3];												//玩家數量

	srand(time(NULL));												//設定亂數種子
	b = 1;															//第幾場
	c = 0;															//c=1，結束

	printf("基本賭金為一百\n1單位為一百，若輸入超過賭金視為梭哈\n同花順> 四條> 葫蘆> 同花> 順子> 三條> 兩對> 一對> 雜牌\n\n");
	while (c!=1)
	{
		printf("Game %d\n", b);
		b = b + 1;
		set(cards, num, suit);											//將cards陣列設定為一副牌
		//intercard(player.num, player.suit);							//手動輸入自己的牌
		incard(cards, player.num, player.suit,bark[0]);					//自動發牌

		for (i = 0; i < 3; i++)											//自動發牌
		{
			incard(cards, pc[i].num, pc[i].suit,bark[i+1]);
		}
		total = 0;
		for (i = 0; i < 4; i++)											//基本下注
		{
			if (bark[i] == 1)
			{
				total = total + 100;
				money[i] = money[i] - 100;
			}
		}

		for (i = 0; i < 5; i++)											//印出每個人的牌
		{
			printf("   Player $%-4d\t\tPC1 $%-4d\t\tPC2 $%-4d\t\tPC3 $%-4d\t賭金%-4d\n", money[0], money[1], money[2], money[3], total);
			for (j = 0; j < i + 1; j++)
			{
				printf("%d  %s\t   %s\t\t", j + 1, suit_name[player.suit[j] - 1], numble[player.num[j]-1]);
				for (k = 0; k < 3; k++)
				{
					printf("%s\t%s\t\t", suit_name[pc[k].suit[j] - 1], numble[pc[k].num[j]-1]);
				}
				printf("\n");
			}
			if (i < 4)
			{
				if (money[0] != 0)
				{
					a = bet(money, bark);								//下注
					total = total + a;									//總賭金
				}
				else
					printf("\n");
			};
		}
		printf("\n   ");

		p1 = judge(suit_name, player.num, player.suit,bark[0]);					//判斷牌
		for (i = 0; i < 3; i++)
		{
			pc_s[i] = judge(suit_name, pc[i].num, pc[i].suit,bark[i+1]);
		}
		//printf("\n%-24d%-24d%-24d%-24d\n\t", p1, pc_s[0], pc_s[1], pc_s[2]);	//比較值
		//printf("\t");
		max = maxs(p1, pc_s[0], pc_s[1], pc_s[2]);
		if (p1 == max)															//找誰贏
		{
			money[0] = money[0] + total;
			printf("\n   Player +$%d\n",total);
		}
		for (i = 0; i < 3; i++)
		{
			if (pc_s[i] == max)
			{
				money[i + 1] = money[i + 1] + total;
				printf("\n   PC%d +$%d\n",i+1, total);
			}
		}
		for (i = 0; i < 4; i++)
		{
			if (money[i] == 0)
				bark[i] = 0;
		}
		printf("\n   Player $%-4d\t\tPC1 $%-4d\t\tPC2 $%-4d\t\tPC3 $%-4d\n", money[0], money[1], money[2], money[3]);
		printf("\n");
		if (bark[0] == 0)														//player破產
		{
			printf("\tYOU LOSE!!\n");
			c = 1;
		}
		if ((bark[1] == 0) && (bark[2] == 0) && (bark[3] == 0))					//PC1~PC3破產
		{
			printf("\tYOU WIN!!\n");
			c = 1;
		}
	}

	system("pause");
	return 0;
}
void set(card poker[], int num[], int suit[])							//設定牌
{
	int i;

	for (i = 0; i < 52; i++)
	{
		poker[i].num = num[i % 13];
		poker[i].suit = suit[i / 13];
	}
}
void intercard(int num[], int suit[])									//輸入牌
{
	int i, j;
	int a;
	printf("請輸入5張不同的牌\n(梅花 1 ,方塊 2 ,愛心 3 ,黑桃 4)\n\n");

	for (i = 0; i < 5; i++)
	{
		do
		{
			a = 0;
			do
			{
				printf("輸入第%d張牌花色:", i + 1);
				scanf_s("%d", &suit[i]);
				if (suit[i]<1 || suit[i]>4)
					printf("輸入錯誤請重新輸入\n");
			} while (suit[i]<1 || suit[i]>4);
			do
			{
				printf("輸入第%d張牌數字:", i + 1);
				scanf_s("%d", &num[i]);
				if (num[i]<1 || num[i]>13)
					printf("輸入錯誤請重新輸入\n");
			} while (num[i]<1 || num[i]>13);
			for (j = 0; j < i; j++)
			{
				if ((num[i] == num[j]) && (suit[i] == suit[j]))
				{
					a = 1;
					printf("重複輸入，請重新輸入\n");
				}
			}
		} while (a == 1);
	}
	bubble(num, suit);
}
void incard(card cards[], int num[], int suit[], int bark)						//抽牌
{
	int i;
	int a;

	if (bark == 1)
	{
		for (i = 0; i < 5; i++)
		{
			do
			{
				a = rand() % 52;
				num[i] = cards[a].num;
				suit[i] = cards[a].suit;
			} while ((cards[a].num == 0) && (cards[a].suit == 0));			//重複重抽
			cards[a].num = 0;
			cards[a].suit = 0;
		}
		bubble(num, suit);
	}
	else
	{
		for (i = 0; i < 5; i++)
		{
			num[i] = 14;
			suit[i] =5;
		}
	}
}
int bet(int bets[], int bark[])											//下注
{
	int i;
	int	bet;
	int total = 0;

	printf("   輸入下注金額\n   ?");
	scanf_s("%d",&bet);

	if (100 * bet > bets[0])											//若大於本金視為梭哈
	{
		for (i = 0; i < 4; i++)
		{
			total = total + bets[i];
			bets[i] = 0;
		}
	}
	else
	{
		for (i = 0; i < 4; i++)
		{
			if (bark[i] == 1)											//是否破產
			{
				if (bets[i] < 100 * bet)								//若本金不足下注金額，就全押
				{
					total = total + bets[i];
					bets[i] = 0;
				}
				else
				{
					total = total + 100 * bet;
					bets[i] = bets[i] - 100 * bet;
				}
			}
		}
	}
	return total;
}
int judge(const char *suit_name[], int num[], int suit[], int bark)				//判斷
{
	int i, j;
	int a, b, c;
	int suits=0;
	int continues = 0;
	int	judges;
	int pokernum[13] = { 0 };
	int renum[5] = {0};

	if (bark == 1)
	{
		for (i = 0; i < 4; i++)				//同花色
		{
			if (suit[i] == suit[i + 1])
				suits = suits + 1;
		}
		for (i = 0; i < 5; i++)				//1~13的數字有幾個
		{
			pokernum[num[i] - 1] = pokernum[num[i] - 1] + 1;
		}
		for (i = 0; i < 9; i++)				//順子
		{
			if (((pokernum[i] == 1) && (pokernum[i + 1] == 1) && (pokernum[i + 2] == 1) && (pokernum[i + 3] == 1) && (pokernum[i + 4] == 1)) || ((pokernum[0] == 1) && (pokernum[9] == 1) && (pokernum[10] == 1) && (pokernum[11] == 1) && (pokernum[12] == 1)))
				continues = 1;
		}
		for (i = 2; i < 5; i++)				//重複的數字，renum[i]為重複i次的有幾個數
		{
			for (j = 0; j < 13; j++)
			{
				if (pokernum[j] == i)
					renum[i] = renum[i] + 1;
			}
		}
		if (renum[4] == 1)					//判斷 雜牌、 一對、 兩對、 三條、 順子、 同花、 葫蘆、 鐵之、 同花順
		{
			for (i = 0; i < 13; i++)
			{
				if (pokernum[i] == 4)
					a = i + 1;
			}
			printf("鐵支\t%d鐵\t", a);
			if ((a == 1) || (a == 2))		//撲克中1、2最大(1=>14，2=>15)
			{
				b = a + 13;
			}
			else
				b = a;
			judges = 8000 + b;				//十位個位是牌的數字
		}
		else if ((renum[3] == 1) && (renum[2] == 1))
		{
			for (i = 0; i < 13; i++)
			{
				if (pokernum[i] == 3)
					a = i + 1;
			}
			printf("葫蘆\t%d蘆\t", a);
			if ((a == 1) || (a == 2))		//撲克中1、2最大(1=>14，2=>15)
			{
				b = a + 13;
			}
			else
				b = a;
			judges = 7000 + b;				//十位個位是牌的數字
		}
		else if (renum[3] == 1)
		{
			for (i = 0; i < 13; i++)
			{
				if (pokernum[i] == 3)
					a = i + 1;
			}
			printf("三條\t三條%d\t", a);
			if ((a == 1) || (a == 2))		//撲克中1、2最大(1=>14，2=>15)
			{
				b = a + 13;
			}
			else
				b = a;
			judges = 4000 + b;				//十位個位是牌的數字
		}
		else if (renum[2] == 2)
		{
			printf("兩對\t");
			for (i = 0; i < 13; i++)
			{
				if (pokernum[i] == 2)
				{
					a = i + 1;
					printf("%d啤 ", a);
					if ((a == 1) || (a == 2))				//撲克中1、2最大(1=>14，2=>15)
					{
						b = a + 13;
						for (j = 0; j < 5; j++)
						{
							if (num[j] == a)
								c = j;
						}
					}
				}
			}
			if (b != 14)
			{
				if (b != 15)
				{
					b = a;
					for (i = 0; i < 5; i++)
					{
						if (num[i] == a)
							c = i;
					}
				}
			}
			if (suit[c] < suit[c - 1])
				c = c - 1;
			judges = 3000 + b * 10 + suit[c];				//十位百位是牌的數字，個位是花色
		}
		else if (renum[2] == 1)
		{
			for (i = 0; i < 13; i++)
			{
				if (pokernum[i] == 2)
					a = i + 1;
			}
			printf("一對\t%d啤\t", a);
			if ((a == 1) || (a == 2))						//撲克中1、2最大(1=>14，2=>15)
			{
				b = a + 13;
			}
			else
				b = a;
			for (i = 0; i < 5; i++)
			{
				if (num[i] == a)
					c = i;
			}
			if (suit[c] < suit[c - 1])
				c = c - 1;
			judges = 2000 + b * 10 + suit[c];				//十位百位是牌的數字，個位是花色
		}
		else if ((suits == 4) && (continues == 1))
		{
			for (i = 0; i < 9; i++)
			{
				if ((pokernum[i] == 1) && (pokernum[i + 1] == 1) && (pokernum[i + 2] == 1) && (pokernum[i + 3] == 1) && (pokernum[i + 4] == 1))
				{
					a = i + 1;
					b = a + 4;
				}
				else if ((pokernum[0] == 1) && (pokernum[9] == 1) && (pokernum[10] == 1) && (pokernum[11] == 1) && (pokernum[12] == 1))
				{
					a = 10;
					b = 1;
				}
			}
			printf("同花順\t%s %d~%d", suit_name[suit[1] - 1], a, b);
			judges = 9000 + suit[1] * 100 + a;							//十位個位是順子最小的數字，百位是花色
		}
		else if (suits == 4)
		{
			printf("同花\t%s\t", suit_name[suit[1] - 1]);
			if ((num[4] == 2) || num[3] == 2)		//撲克中1、2最大(2=>15)
			{
				a = 15;
			}
			else if (num[4] == 1)					//撲克中1、2最大(1=>14)
			{
				a = 14;
			}
			else
			{
				a = num[0];
			}
			judges = 6000 + suit[1] * 100 + a;						//十位個位是牌的數字，百位是花色
		}
		else if (continues == 1)
		{
			for (i = 0; i < 9; i++)
			{
				if ((pokernum[i] == 1) && (pokernum[i + 1] == 1) && (pokernum[i + 2] == 1) && (pokernum[i + 3] == 1) && (pokernum[i + 4] == 1))
				{
					a = i + 1;
					b = a + 4;
				}
				else if ((pokernum[0] == 1) && (pokernum[9] == 1) && (pokernum[10] == 1) && (pokernum[11] == 1) && (pokernum[12] == 1))
				{
					a = 10;
					b = 1;
				}
			}
			printf("順子\t%d~%d\t", a, b);
			for (i = 0; i < 5; i++)
			{
				if (num[i] == b)
					c = suit[i];
			}
			judges = 5000 + a * 10 + c;								//十位百位是順子最小的數字，個位是第一位的花色
		}
		else
		{
			printf("雜牌\t\t");
			if ((num[4] == 2) || num[3] == 2)						//撲克中1、2最大(2=>15)
			{
				a = 15;
				for (i = 0; i < 2; i++)
				{
					if (num[3 + i] == 2)
						b = suit[3 + i];
				}
			}
			else if (num[4] == 1)									//撲克中1、2最大(1=>14)
			{
				a = 14;
				b = suit[4];
			}
			else
			{
				a = num[0];
				b = suit[0];
			}
			judges = 1000 + a * 10 + b;								//十位百位是最大的數字，個位是最大數字的花色
		}
	}
	else
	{
		printf("破產\t\t");
		judges = 0;
	}
	printf("\t");
	return judges;
}
void bubble(int n[], int s[])										//氣泡
{
	int i,j;
	int a, b;

	for (i = 0; i < 4; i++)
	{
		for (j = 0; j < 4 - i; j++)
		{
			if (n[j] < n[j + 1])
			{
				a = n[j];
				b = s[j];
				n[j] = n[j+1];
				s[j] = s[j + 1];
				n[j + 1] = a;
				s[j + 1] = b;
			}
		}
	}
}
int maxs(int a, int b, int c, int d)								//找最大
{
	if (a < b)
		a = b;
	if (a < c)
		a = c;
	if (a < d)
		a = d;
	return a;
}